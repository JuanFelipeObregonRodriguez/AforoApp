{"version":3,"sources":["components/person.jsx","App.js","serviceWorker.js","index.js"],"names":["Person","_ref","person","react_default","a","createElement","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoRef","React","createRef","canvasRef","detectFrame","video","model","detect","then","predictions","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","NumbersPerson","setState","count","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","console","log","state","fillText","_this2","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","catch","error","Fragment","className","components_person","autoPlay","playsInline","muted","ref","Component","rootElement","document","getElementById","ReactDOM","render","App_App","Boolean","location","hostname","match","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e1ca09d.chunk.js","sourcesContent":["/** @format */\n\nimport React from 'react';\n\nconst Person = ({ person }) => {\n\treturn <h1>{person}</h1>;\n};\nexport default Person;\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport Person from './components/person';\nimport '@tensorflow/tfjs';\nimport './styles.css';\n\nexport default class App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0,\n\t\t};\n\t}\n\n\tvideoRef = React.createRef();\n\tcanvasRef = React.createRef();\n\n\tcomponentDidMount() {\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n\t\t\tconst webCamPromise = navigator.mediaDevices\n\t\t\t\t.getUserMedia({\n\t\t\t\t\taudio: false,\n\t\t\t\t\tvideo: {\n\t\t\t\t\t\tfacingMode: 'user',\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.then((stream) => {\n\t\t\t\t\twindow.stream = stream;\n\t\t\t\t\tthis.videoRef.current.srcObject = stream;\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tthis.videoRef.current.onloadedmetadata = () => {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst modelPromise = cocoSsd.load();\n\t\t\tPromise.all([modelPromise, webCamPromise])\n\t\t\t\t.then((values) => {\n\t\t\t\t\tthis.detectFrame(this.videoRef.current, values[0]);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tdetectFrame = (video, model) => {\n\t\tmodel.detect(video).then((predictions) => {\n\t\t\tthis.renderPredictions(predictions);\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.detectFrame(video, model);\n\t\t\t});\n\t\t});\n\t};\n\n\trenderPredictions = (predictions) => {\n\t\tconst ctx = this.canvasRef.current.getContext('2d');\n\t\tctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\t// Font options.\n\t\tconst font = '16px sans-serif';\n\t\tctx.font = font;\n\t\tctx.textBaseline = 'top';\n\t\tlet NumbersPerson = 0;\n\t\tthis.setState({ count: 0 });\n\n\t\tpredictions.forEach((prediction) => {\n\t\t\tconst x = prediction.bbox[0];\n\t\t\tconst y = prediction.bbox[1];\n\t\t\tconst width = prediction.bbox[2];\n\t\t\tconst height = prediction.bbox[3];\n\t\t\t// Draw the bounding box.\n\t\t\tctx.strokeStyle = '#00FFFF';\n\t\t\tctx.lineWidth = 4;\n\t\t\tctx.strokeRect(x, y, width, height);\n\t\t\t// Draw the label background.\n\t\t\tctx.fillStyle = '#00FFFF';\n\t\t\tconst textWidth = ctx.measureText(prediction.class).width;\n\t\t\tconst textHeight = parseInt(font, 10); // base 10\n\t\t\tctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n\n\t\t\t/* Codigo de Carlos y andres */\n\t\t\tconst person = 'person';\n\t\t\tif (prediction.class == person) {\n\t\t\t\tNumbersPerson++;\n\t\t\t}\n\t\t\tthis.setState({ count: NumbersPerson });\n\t\t\tconsole.log(this.state.count);\n\t\t});\n\n\t\tpredictions.forEach((prediction) => {\n\t\t\tconst x = prediction.bbox[0];\n\t\t\tconst y = prediction.bbox[1];\n\t\t\t// Draw the text last to ensure it's on top.\n\t\t\tctx.fillStyle = '#000000';\n\t\t\tctx.fillText(prediction.class, x, y);\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<header className='App-header'>\n\t\t\t\t\t\t<Person person={this.state.count} />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<video\n\t\t\t\t\t\t\t\tclassName='size'\n\t\t\t\t\t\t\t\tautoPlay\n\t\t\t\t\t\t\t\tplaysInline\n\t\t\t\t\t\t\t\tmuted\n\t\t\t\t\t\t\t\tref={this.videoRef}\n\t\t\t\t\t\t\t\twidth='600'\n\t\t\t\t\t\t\t\theight='500'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<canvas className='size' ref={this.canvasRef} width='600' height='500' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}